{"version":3,"sources":["components/Redux/cartType.js","components/Redux/cartAction.js","components/Redux/cartRemoveType.js","components/Redux/cartRemoveAction.js","components/BotsComponent/index.js","components/MainComponent/index.js","components/EachBot/index.js","components/NavBar/index.js","components/CartItems/index.js","components/PageNotFound/index.js","App.js","reportWebVitals.js","components/Redux/cartReducer.js","components/store/index.js","index.js"],"names":["ADD_TO_CART","addToCart","eachData","type","payload","REMOVE_FROM_CART","removeFromCart","eachItem","BotsComponent","data","useSelector","state","dispatch","useDispatch","className","map","bot","cagr","to","id","onClick","MainComponent","EachBot","props","match","params","parseInt","newData","filter","description","NavBar","cartValue","noOfCartItems","alt","src","CartItems","cartData","wholeCartData","length","count","PageNotFound","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialCartItems","cartReducer","action","initialCart","isItemInCart","updatedCart","updatenewItem","console","log","initialCartForRemove","updatedCartForRemove","isItemInCartForRemove","alert","store","createStore","applyMiddleware","logger","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mXAAaA,EAAe,cCObC,MANd,SAAmBC,GAChB,MAAM,CACFC,KAAKH,EACLI,QAAQF,ICJHG,EAAmB,mBCOjBC,MANf,SAAwBC,GACpB,MAAM,CACFJ,KAAKE,EACLD,QAAQG,I,OC8BDC,EA5BO,WAClB,IAAMC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,QAClCG,EAAWC,cACjB,OACI,qBAAKC,UAAU,WAAf,SACKL,EAAKM,KAAI,SAAAb,GAAQ,OACd,sBAAKY,UAAU,UAAf,UACI,oBAAIA,UAAU,UAAd,SAAyBZ,EAASc,MAClC,sBAAKF,UAAU,aAAf,UACI,mBAAGA,UAAU,WAAb,yBACA,mBAAGA,UAAU,cAAb,SAA4BZ,EAAS,oBAEzC,sBAAKY,UAAU,OAAf,UACI,oBAAIA,UAAU,WAAd,kBACA,oBAAGA,UAAU,cAAb,UAA4BZ,EAASe,KAArC,UAEJ,sBAAKH,UAAU,UAAf,UACA,cAAC,IAAD,CAAMI,GAAE,wBAAmBhB,EAASiB,IAApC,SACI,wBAAQL,UAAU,WAAlB,yBAEA,wBAAQA,UAAU,MAAMM,QAAS,kBAAIR,EAASX,EAAUC,KAAxD,iBACA,wBAAQY,UAAU,SAASM,QAAS,kBAAIR,EAASN,EAAeJ,KAAhE,gCCjBTmB,G,MARM,WACjB,OACI,qBAAKP,UAAU,YAAf,SACI,cAAC,EAAD,QCqCGQ,G,MApCC,SAACC,GACb,IAAMd,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,QAGnCU,EAFWI,EAATC,MACAC,OACFN,GACJA,EAAKO,SAASP,GACf,IAAMQ,EAAUlB,EAAKmB,QAAO,SAAA1B,GAAQ,OAAEA,EAASiB,KAAKA,KAC9CP,EAAWC,cAEjB,OACI,qBAAKC,UAAU,cAAf,SACI,sBAAKA,UAAU,UAAf,UACI,gCACI,oBAAIA,UAAU,UAAd,SAAyBa,EAAQ,GAAGX,MACpC,mBAAGF,UAAU,cAAb,SAA4Ba,EAAQ,GAAGE,iBAE3C,sBAAKf,UAAU,aAAf,UACI,mBAAGA,UAAU,WAAb,yBACA,mBAAGA,UAAU,cAAb,SAA4Ba,EAAQ,GAAG,oBAE3C,sBAAKb,UAAU,OAAf,UACI,oBAAIA,UAAU,WAAd,kBACA,oBAAGA,UAAU,cAAb,UAA4Ba,EAAQ,GAAGV,KAAvC,UAEJ,sBAAKH,UAAU,UAAf,UACI,cAAC,IAAD,CAAMI,GAAE,QAAR,SACI,wBAAQJ,UAAU,WAAlB,oBAEJ,wBAAQA,UAAU,MAAMM,QAAS,kBAAIR,EAASX,EAAU0B,EAAQ,MAAhE,iBACA,wBAAQb,UAAU,SAASM,QAAS,kBAAIR,EAASN,EAAeqB,EAAQ,MAAxE,8BCZLG,G,MApBA,WACX,IAAMC,EAAYrB,aAAY,SAACC,GAAD,OAASA,EAAMqB,iBAC7C,OACI,gCACI,oBAAIlB,UAAU,cAAd,iCACA,sBAAKA,UAAU,YAAf,UACA,cAAC,IAAD,CAAMI,GAAG,QAAT,SAAiB,4CACjB,oBAAGJ,UAAU,kBAAb,kCAAqDiB,KACrD,cAAC,IAAD,CAAMb,GAAG,aAAT,SACI,sBAAKJ,UAAU,mBAAf,UACI,qBAAKmB,IAAI,YACLC,IAAI,qLACRpB,UAAU,cACV,mBAAGA,UAAU,WAAb,mCCgBLqB,G,MA9BG,WACd,IAAMC,EAAW1B,aAAY,SAAAC,GAAK,OAAIA,EAAMyB,YACtCC,EAAkC,IAAlBD,EAASE,OAAW,sBAAKxB,UAAU,eAAf,UACtC,oBAAIA,UAAU,eAAd,2BACA,qBAAKoB,IAAI,+EAA+ED,IAAI,gBAAgBnB,UAAU,sBACvG,oBAAIA,UAAU,WAAd,kBACnB,OACI,sBAAMA,UAAU,WAAhB,UACKuB,EACAD,EAASrB,KAAI,SAAAR,GAAQ,OAClB,qBAAKO,UAAU,cAAf,SACI,sBAAKA,UAAU,UAAf,UACI,mBAAGA,UAAU,WAAb,SAAyBP,EAASS,MAClC,sBAAKF,UAAU,aAAf,UACI,mBAAGA,UAAU,WAAb,yBACA,mBAAGA,UAAU,cAAb,SAA4BP,EAAS,oBAEzC,sBAAKO,UAAU,OAAf,UACI,oBAAIA,UAAU,WAAd,kBACA,oBAAGA,UAAU,cAAb,UAA4BP,EAASU,KAArC,UAEJ,qBAAKH,UAAU,UAAf,SACI,qBAAIA,UAAU,wBAAd,sBAAgDP,EAASgC,wB,MCbtEC,MATf,WACI,OACI,sBAAK1B,UAAU,eAAf,UACI,oBAAIA,UAAU,cAAd,+CACA,qBAAKA,UAAU,oBAAoBoB,IAAI,2EAA2ED,IAAI,uBCmBnHQ,MAlBf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,eAAC,IAAD,WACA,cAAC,EAAD,IAEE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,QAAQC,UAAWvB,IACrC,cAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,oBAAoBC,UAAWtB,IACjD,cAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,aAAaC,UAAWT,IAC1C,cAAC,IAAD,CAAOS,UAAWJ,aCLbK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCLRQ,EAAmB,CACrBtB,cAAc,EACdvB,KAAK,CACD,CACA,GAAK,EACL,IAAM,UACN,YAAc,iGACd,cAAc,OACd,KAAO,IAEP,CACA,GAAK,EACL,IAAM,WACN,YAAc,kGACd,cAAc,OACd,KAAO,IAEP,CACA,GAAK,EACL,IAAM,cACN,YAAc,qGACd,cAAc,OACd,KAAO,KAGP2B,SAAS,IAkFFmB,EA/EK,WAAkC,IAAjC5C,EAAgC,uDAA1B2C,EAAiBE,EAAS,uCACjD,OAAQA,EAAOrD,MACX,KAAKH,EACD,IAAMyD,EAAc9C,EAAMyB,SACpBsB,EAAeD,EAAY7B,QAAO,SAAArB,GAAQ,OAAEA,EAASY,KAAKqC,EAAOpD,QAAQe,MAC3EwC,EAAc,KAClB,GAAGD,EAAapB,OAAO,EACnBqB,EAAcF,EAAY1C,KAAI,SAAAR,GAC1B,OAAGA,EAASY,KAAKqC,EAAOpD,QAAQe,GACrB,2BAAIZ,GAAX,IAAoB,MAAQA,EAASgC,MAAM,IAExChC,SAGX,CACA,IAAMqD,EAAa,2BAAOJ,EAAOpD,SAAd,IAAsBmC,MAAM,IAC/CoB,EAAW,sBAAOF,GAAP,CAAmBG,IAGlC,OADAC,QAAQC,IAAIH,GACZ,2BACOhD,GADP,IAEIyB,SAASuB,EACT3B,cAAcrB,EAAMqB,cAAc,IAE1C,KAAK3B,EACD,IAAM0D,EAAuBpD,EAAMyB,SAC/B4B,EAAuB,GAC3B,GAAGD,EAAqBzB,OAAO,EAAE,CAC7B,IAAM2B,EAAwBF,EAAqBnC,QAAO,SAAArB,GAAQ,OAAEA,EAASY,KAAKqC,EAAOpD,QAAQe,MAEjG,OADA0C,QAAQC,IAAIG,EAAsB3B,QAC/B2B,EAAsB3B,OAAO,GAC5B0B,EAAuBD,EAEpBE,EAAsB,GAAG1B,MAAM,GAC9ByB,EAAuBD,EAAqBhD,KAAI,SAAAR,GAC5C,OAAGA,EAASY,KAAKqC,EAAOpD,QAAQe,GACrB,2BAAIZ,GAAX,IAAoB,MAAQA,EAASgC,MAAM,IAExChC,KAEX,2BACOI,GADP,IAEIyB,SAAS4B,EACThC,cAAcrB,EAAMqB,cAAc,MAItCgC,EAAuBD,EAAqBnC,QAAO,SAAArB,GAAQ,OAAEA,EAASY,KAAKqC,EAAOpD,QAAQe,MAC1F,2BACOR,GADP,IAEIyB,SAAS4B,EACThC,cAAcrB,EAAMqB,cAAc,OAK9CgC,EAAuBD,EACvBG,MAAM,gCACN,2BACOvD,GADP,IAEIyB,SAAS4B,EACThC,cAAcrB,EAAMqB,iBAOxB,OAFAgC,EAAuBD,EACvBG,MAAM,iBACN,2BACOvD,GADP,IAEIyB,SAAS4B,EACThC,cAAcrB,EAAMqB,gBAIhC,QACI,OAAOsB,I,yBCvGba,EAAQC,YAAYb,EAAYc,YAAgBC,MACtDT,QAAQC,IAAIK,EAAMI,YACHJ,QCIfK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,SAM1B/B,M","file":"static/js/main.117131f7.chunk.js","sourcesContent":["export const ADD_TO_CART  = \"ADD_TO_CART\";","import { ADD_TO_CART } from \"./cartType\"\r\n function addToCart(eachData){\r\n    return{\r\n        type:ADD_TO_CART,\r\n        payload:eachData\r\n    }\r\n}\r\nexport default addToCart","export const REMOVE_FROM_CART = \"REMOVE_FROM_CART\"","import {REMOVE_FROM_CART} from './cartRemoveType'\r\nfunction removeFromCart(eachItem){\r\n    return{\r\n        type:REMOVE_FROM_CART,\r\n        payload:eachItem\r\n    }\r\n}\r\nexport default removeFromCart","import {Link} from 'react-router-dom'\r\nimport './index.css'\r\nimport { useDispatch } from 'react-redux'\r\nimport addToCart from '../Redux/cartAction'\r\nimport removeFromCart from '../Redux/cartRemoveAction'\r\nimport { useSelector } from 'react-redux'\r\nconst BotsComponent = () =>{\r\n    const data = useSelector(state => state.data)\r\n    const dispatch = useDispatch();\r\n    return(\r\n        <div className=\"mainBots\">\r\n            {data.map(eachData=>\r\n                <div className=\"eachBot\">\r\n                    <h1 className=\"botName\">{eachData.bot}</h1>\r\n                    <div className=\"indexValue\">\r\n                        <p className=\"cargHead\">Index value</p>\r\n                        <p className=\"cargPercent\">{eachData['index-value']}</p>\r\n                    </div>\r\n                    <div className=\"carg\">\r\n                        <h1 className=\"cargHead\">CAGR</h1>\r\n                        <p className=\"cargPercent\">{eachData.cagr}%</p>\r\n                    </div>\r\n                    <div className=\"buttons\">\r\n                    <Link to={`/bots-details/${eachData.id}`}>\r\n                        <button className=\"viewAlgo\">View algo</button>\r\n                        </Link>\r\n                        <button className=\"buy\" onClick={()=>dispatch(addToCart(eachData))}>Buy</button>\r\n                        <button className=\"remove\" onClick={()=>dispatch(removeFromCart(eachData))}>Remove</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default BotsComponent  ","import BotsComponent from '../BotsComponent'\r\nimport './index.css'\r\nconst MainComponent =()=>{\r\n    return(\r\n        <div className=\"cartvalue\">\r\n            <BotsComponent/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainComponent","import { Link } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport addToCart from '../Redux/cartAction'\r\nimport removeFromCart from '../Redux/cartRemoveAction'\r\nimport { useSelector } from 'react-redux'\r\nimport './index.css'\r\nconst EachBot = (props)=>{\r\n    const data = useSelector(state => state.data)\r\n    const {match} = props \r\n    const {params} = match\r\n    let {id} = params\r\n     id = parseInt(id)\r\n    const newData = data.filter(eachData=>eachData.id===id)\r\n    const dispatch = useDispatch();\r\n\r\n    return(\r\n        <div className=\" widthClass\">\r\n            <div className=\"eachBot\">\r\n                <div>\r\n                    <h1 className=\"botName\">{newData[0].bot}</h1>\r\n                    <p className=\"cargPercent\">{newData[0].description}</p>\r\n                </div>\r\n                <div className=\"indexValue\">\r\n                    <p className=\"cargHead\">Index value</p>\r\n                    <p className=\"cargPercent\">{newData[0]['index-value']}</p>\r\n                </div>\r\n                <div className=\"carg\">\r\n                    <h1 className=\"cargHead\">CAGR</h1>\r\n                    <p className=\"cargPercent\">{newData[0].cagr}%</p>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <Link to={`/bots`}>\r\n                        <button className=\"viewAlgo\">Back</button>\r\n                    </Link>\r\n                    <button className=\"buy\" onClick={()=>dispatch(addToCart(newData[0]))}>Buy</button>\r\n                    <button className=\"remove\" onClick={()=>dispatch(removeFromCart(newData[0]))}>Remove</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n)}\r\n    \r\n\r\nexport default EachBot","import './index.css'\r\nimport { useSelector } from \"react-redux\"\r\nimport { Link } from \"react-router-dom\"\r\nconst NavBar = () =>{\r\n    const cartValue = useSelector((state)=>state.noOfCartItems)\r\n    return(\r\n        <div>\r\n            <h1 className=\"botsWelcome\">Welcome To Bots App</h1>\r\n            <div className=\"cartvalue\">\r\n            <Link to=\"/bots\"><p>DashBoard</p></Link>\r\n            <p className=\"noOfItemsInCart\">No of Items In Cart: {cartValue}</p>\r\n            <Link to=\"/cartItems\">\r\n                <div className=\"cartImageAndText\">\r\n                    <img alt=\"cartImage\" \r\n                        src=\"https://media.istockphoto.com/photos/shopping-cart-vector-art-closeup-view-picture-id1251362621?b=1&k=20&m=1251362621&s=170667a&w=0&h=dRxDVhO60mUXTb3g5N5EFizNRm8Sq7xDKdmyeBeZTXQ=\" \r\n                    className=\"cartImage\"/>\r\n                    <p className=\"cartText\">OpenCart</p>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar","import {useSelector} from 'react-redux'\r\nimport './index.css'\r\nconst CartItems = () =>{\r\n    const cartData = useSelector(state => state.cartData)\r\n    const wholeCartData = cartData.length===0?<div className=\"cartEmptyDiv\">\r\n        <h1 className=\"cartQuantity\">Cart Is Empty</h1>\r\n        <img src=\"https://i.pinimg.com/originals/2e/ac/fa/2eacfa305d7715bdcd86bb4956209038.png\" alt=\"cart is empty\" className=\"cartEmptyImage\"/>\r\n                </div>:<h1 className=\"cartFull\">Cart</h1>\r\n    return(\r\n        <div  className=\"cartBots\">\r\n            {wholeCartData}\r\n            {cartData.map(eachItem=>\r\n                <div className=\"eachCartBot\">\r\n                    <div className=\"eachBot\">\r\n                        <p className=\"cargHead\">{eachItem.bot}</p>\r\n                        <div className=\"indexValue\">\r\n                            <p className=\"cargHead\">Index value</p>\r\n                            <p className=\"cargPercent\">{eachItem['index-value']}</p>\r\n                        </div>\r\n                        <div className=\"carg\">\r\n                            <h1 className=\"cargHead\">CAGR</h1>\r\n                            <p className=\"cargPercent\">{eachItem.cagr}%</p>\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                            <h1 className=\"cargHead cartQuantity\">Quantity:{eachItem.count}</h1>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default CartItems","import React from 'react'\r\nimport './index.css'\r\nfunction PageNotFound() {\r\n    return (\r\n        <div className=\"pageNotFound\">\r\n            <h1 className=\"botsWelcome\">Page not found click on DashBoard</h1>\r\n            <img className=\"pageNotFoundImage\" src=\"http://www.digitalmesh.com/blog/wp-content/uploads/2020/05/404-error.jpg\" alt=\"page not found\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageNotFound\r\n","import './App.css';\nimport {BrowserRouter,Switch,Route} from 'react-router-dom'\nimport MainComponent from './components/MainComponent';\nimport EachBot from './components/EachBot'\nimport NavBar from './components/NavBar';\nimport CartItems from './components/CartItems';\nimport PageNotFound from './components/PageNotFound';\nfunction App() {\n  return (\n    <div className=\"App\"> \n      <BrowserRouter>\n      <NavBar/>\n\n        <Switch>\n          <Route exact path=\"/bots\" component={MainComponent}/>\n          <Route exact path=\"/bots-details/:id\" component={EachBot} />\n          <Route exact path=\"/cartItems\" component={CartItems}/>\n          <Route component={PageNotFound}/>\n        </Switch>\n      </BrowserRouter>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_TO_CART } from \"./cartType\";\r\nimport {REMOVE_FROM_CART} from './cartRemoveType'\r\nconst initialCartItems = {\r\n    noOfCartItems:0,\r\n    data:[\r\n        {\r\n        \"id\":1,\r\n        \"bot\":\"Hot Bot\",\r\n        \"description\":\"Hot bot is low volatility portfolio of growth stocks selected based on our proprietary metrics\",\r\n        \"index-value\":289.34,\r\n        \"cagr\":34\r\n        },\r\n        {\r\n        \"id\":2,\r\n        \"bot\":\"Cool Bot\",\r\n        \"description\":\"Cool bot is low volatility portfolio of growth stocks selected based on our proprietary metrics\",\r\n        \"index-value\":439.34,\r\n        \"cagr\":28\r\n        },\r\n        {\r\n        \"id\":3,\r\n        \"bot\":\"Options Bot\",\r\n        \"description\":\"Options bot is low volatility portfolio of growth stocks selected based on our proprietary metrics\",\r\n        \"index-value\":139.34,\r\n        \"cagr\":42\r\n        }\r\n        ],\r\n        cartData:[]\r\n}\r\n\r\nconst cartReducer = (state=initialCartItems,action)=>{\r\n    switch (action.type) {\r\n        case ADD_TO_CART:\r\n            const initialCart = state.cartData\r\n            const isItemInCart = initialCart.filter(eachItem=>eachItem.id===action.payload.id)\r\n            let updatedCart = null\r\n            if(isItemInCart.length>0){\r\n                updatedCart = initialCart.map(eachItem=>{\r\n                    if(eachItem.id===action.payload.id){\r\n                        return {...eachItem,\"count\":eachItem.count+1}\r\n                    }\r\n                    return eachItem}\r\n                    )\r\n            }\r\n            else{\r\n                const updatenewItem = {...action.payload,count:1}\r\n                updatedCart = [...initialCart,updatenewItem]\r\n            }\r\n            console.log(updatedCart)\r\n            return{\r\n                ...state,\r\n                cartData:updatedCart,\r\n                noOfCartItems:state.noOfCartItems+1\r\n            }   \r\n        case REMOVE_FROM_CART:\r\n            const initialCartForRemove = state.cartData\r\n            let updatedCartForRemove = []\r\n            if(initialCartForRemove.length>0){\r\n                const isItemInCartForRemove = initialCartForRemove.filter(eachItem=>eachItem.id===action.payload.id)\r\n                console.log(isItemInCartForRemove.length)\r\n                if(isItemInCartForRemove.length>0){\r\n                    updatedCartForRemove = initialCartForRemove\r\n\r\n                    if(isItemInCartForRemove[0].count>1){\r\n                        updatedCartForRemove = initialCartForRemove.map(eachItem=>{\r\n                            if(eachItem.id===action.payload.id){\r\n                                return {...eachItem,\"count\":eachItem.count-1}\r\n                            }\r\n                            return eachItem}\r\n                            )\r\n                        return{\r\n                            ...state,\r\n                            cartData:updatedCartForRemove,\r\n                            noOfCartItems:state.noOfCartItems-1\r\n                        } \r\n                    }\r\n                    else{\r\n                        updatedCartForRemove = initialCartForRemove.filter(eachItem=>eachItem.id!==action.payload.id)\r\n                        return{\r\n                            ...state,\r\n                            cartData:updatedCartForRemove,\r\n                            noOfCartItems:state.noOfCartItems-1\r\n                        }\r\n                    } \r\n                }\r\n            else{\r\n                updatedCartForRemove = initialCartForRemove\r\n                alert(\"Selected Item is not in cart\")\r\n                return{\r\n                    ...state,\r\n                    cartData:updatedCartForRemove,\r\n                    noOfCartItems:state.noOfCartItems\r\n                } \r\n            }\r\n        }\r\n            else{\r\n                updatedCartForRemove = initialCartForRemove\r\n                alert(\"Cart Is Empty\")\r\n                return{\r\n                    ...state,\r\n                    cartData:updatedCartForRemove,\r\n                    noOfCartItems:state.noOfCartItems\r\n                } \r\n            }\r\n        \r\n        default:\r\n            return initialCartItems\r\n    }\r\n}\r\nexport default cartReducer","import cartReducer from \"../Redux/cartReducer\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport logger from 'redux-logger'\r\nconst store = createStore(cartReducer,applyMiddleware(logger))\r\nconsole.log(store.getState())\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport store from './components/store'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}